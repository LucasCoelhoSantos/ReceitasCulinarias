services:
  receitasculinarias.db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: receitasculinarias.db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD} # A senha virá do arquivo .env
    volumes:
      - mssql-data:/var/opt/mssql
  
  receitasculinarias.api:
    container_name: receitasculinarias.api
    build:
      context: .
      dockerfile: ReceitasCulinarias.API/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      # Configuração do banco de dados para apontar para o serviço 'db'
      - ConnectionStrings__DefaultConnection=Server=receitasculinarias.db,1433;Database=ReceitasCulinariasDb;User ID=sa;Password=${DB_PASSWORD};TrustServerCertificate=True;
      # Configurações do JWT (é melhor usar variáveis de ambiente)
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__DurationInMinutes=120
    depends_on:
      - receitasculinarias.db
  
  receitasculinarias.frontend:
    container_name: receitasculinarias.frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile

  nginx-proxy:
    container_name: nginx-proxy
    image: nginx:alpine
    ports:
      - "80:80" # Mapeia a porta 80 do contêiner para a porta 80 do host
    volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
    - receitasculinarias.api
    - receitasculinarias.frontend

volumes:
  mssql-data: